// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    AdmissionTypeDTO,
} from '../models';

export interface DeleteAdmissionTypeRequest {
    code: string;
}

export interface NewAdmissionTypeRequest {
    admissionTypeDTO: AdmissionTypeDTO;
}

export interface UpdateAdmissionTypesRequest {
    admissionTypeDTO: AdmissionTypeDTO;
}

/**
 * no description
 */
export class AdmissionTypesApi extends BaseAPI {

    /**
     */
    deleteAdmissionType({ code }: DeleteAdmissionTypeRequest): Observable<boolean>
    deleteAdmissionType({ code }: DeleteAdmissionTypeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteAdmissionType({ code }: DeleteAdmissionTypeRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteAdmissionType');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/admissiontypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getAdmissionTypes(): Observable<Array<AdmissionTypeDTO>>
    getAdmissionTypes(opts?: OperationOpts): Observable<RawAjaxResponse<Array<AdmissionTypeDTO>>>
    getAdmissionTypes(opts?: OperationOpts): Observable<Array<AdmissionTypeDTO> | RawAjaxResponse<Array<AdmissionTypeDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<AdmissionTypeDTO>>({
            url: '/admissiontypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    newAdmissionType({ admissionTypeDTO }: NewAdmissionTypeRequest): Observable<AdmissionTypeDTO>
    newAdmissionType({ admissionTypeDTO }: NewAdmissionTypeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AdmissionTypeDTO>>
    newAdmissionType({ admissionTypeDTO }: NewAdmissionTypeRequest, opts?: OperationOpts): Observable<AdmissionTypeDTO | RawAjaxResponse<AdmissionTypeDTO>> {
        throwIfNullOrUndefined(admissionTypeDTO, 'admissionTypeDTO', 'newAdmissionType');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<AdmissionTypeDTO>({
            url: '/admissiontypes',
            method: 'POST',
            headers,
            body: admissionTypeDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    updateAdmissionTypes({ admissionTypeDTO }: UpdateAdmissionTypesRequest): Observable<AdmissionTypeDTO>
    updateAdmissionTypes({ admissionTypeDTO }: UpdateAdmissionTypesRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AdmissionTypeDTO>>
    updateAdmissionTypes({ admissionTypeDTO }: UpdateAdmissionTypesRequest, opts?: OperationOpts): Observable<AdmissionTypeDTO | RawAjaxResponse<AdmissionTypeDTO>> {
        throwIfNullOrUndefined(admissionTypeDTO, 'admissionTypeDTO', 'updateAdmissionTypes');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<AdmissionTypeDTO>({
            url: '/admissiontypes',
            method: 'PUT',
            headers,
            body: admissionTypeDTO,
        }, opts?.responseOpts);
    };

}
