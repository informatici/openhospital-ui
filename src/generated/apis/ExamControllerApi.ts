// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    ExamDTO,
    ResponseEntity,
} from '../models';

export interface DeleteExamUsingDELETERequest {
    code: string;
}

export interface GetExamsUsingGETRequest {
    description: string;
}

export interface NewExamUsingPOSTRequest {
    newExam: ExamDTO;
}

export interface UpdateExamsUsingPUTRequest {
    code: string;
    updateExam: ExamDTO;
}

/**
 * no description
 */
export class ExamControllerApi extends BaseAPI {

    /**
     * deleteExam
     */
    deleteExamUsingDELETE = ({ code }: DeleteExamUsingDELETERequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(code, 'deleteExamUsingDELETE');

        return this.request<ResponseEntity>({
            path: '/exams/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
        });
    };

    /**
     * getExams
     */
    getExamsUsingGET = ({ description }: GetExamsUsingGETRequest): Observable<Array<ExamDTO>> => {
        throwIfNullOrUndefined(description, 'getExamsUsingGET');

        return this.request<Array<ExamDTO>>({
            path: '/exams/{description}'.replace('{description}', encodeURI(description)),
            method: 'GET',
        });
    };

    /**
     * getExams
     */
    getExamsUsingGET1 = (): Observable<Array<ExamDTO>> => {
        return this.request<Array<ExamDTO>>({
            path: '/exams',
            method: 'GET',
        });
    };

    /**
     * newExam
     */
    newExamUsingPOST = ({ newExam }: NewExamUsingPOSTRequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(newExam, 'newExamUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ResponseEntity>({
            path: '/exams',
            method: 'POST',
            headers,
            body: newExam,
        });
    };

    /**
     * updateExams
     */
    updateExamsUsingPUT = ({ code, updateExam }: UpdateExamsUsingPUTRequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(code, 'updateExamsUsingPUT');
        throwIfNullOrUndefined(updateExam, 'updateExamsUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ResponseEntity>({
            path: '/exams/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: updateExam,
        });
    };

}
