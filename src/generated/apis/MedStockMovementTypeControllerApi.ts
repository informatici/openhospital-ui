// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    MovementTypeDTO,
} from '../models';

export interface DeleteMedicaldsrstockmovTypeUsingDELETERequest {
    code: string;
}

export interface GetMovementTypeUsingGETRequest {
    code: string;
}

export interface IsCodeUsedUsingGETRequest {
    code: string;
}

export interface NewMedicaldsrstockmovTypeUsingPOSTRequest {
    medicaldsrstockmovType: MovementTypeDTO;
}

export interface UpdateMedicaldsrstockmovTypeUsingPUTRequest {
    medicaldsrstockmovTypeDTO: MovementTypeDTO;
}

/**
 * no description
 */
export class MedStockMovementTypeControllerApi extends BaseAPI {

    /**
     * deleteMedicaldsrstockmovType
     */
    deleteMedicaldsrstockmovTypeUsingDELETE = ({ code }: DeleteMedicaldsrstockmovTypeUsingDELETERequest): Observable<boolean> => {
        throwIfNullOrUndefined(code, 'deleteMedicaldsrstockmovTypeUsingDELETE');

        return this.request<boolean>({
            path: '/medstockmovementtype/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
        });
    };

    /**
     * getMedicaldsrstockmovType
     */
    getMedicaldsrstockmovTypeUsingGET = (): Observable<Array<MovementTypeDTO>> => {
        return this.request<Array<MovementTypeDTO>>({
            path: '/medstockmovementtype',
            method: 'GET',
        });
    };

    /**
     * getMovementType
     */
    getMovementTypeUsingGET = ({ code }: GetMovementTypeUsingGETRequest): Observable<MovementTypeDTO> => {
        throwIfNullOrUndefined(code, 'getMovementTypeUsingGET');

        return this.request<MovementTypeDTO>({
            path: '/medstockmovementtype/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
        });
    };

    /**
     * isCodeUsed
     */
    isCodeUsedUsingGET = ({ code }: IsCodeUsedUsingGETRequest): Observable<boolean> => {
        throwIfNullOrUndefined(code, 'isCodeUsedUsingGET');

        return this.request<boolean>({
            path: '/medstockmovementtype/check/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
        });
    };

    /**
     * newMedicaldsrstockmovType
     */
    newMedicaldsrstockmovTypeUsingPOST = ({ medicaldsrstockmovType }: NewMedicaldsrstockmovTypeUsingPOSTRequest): Observable<void> => {
        throwIfNullOrUndefined(medicaldsrstockmovType, 'newMedicaldsrstockmovTypeUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            path: '/medstockmovementtype',
            method: 'POST',
            headers,
            body: medicaldsrstockmovType,
        });
    };

    /**
     * updateMedicaldsrstockmovType
     */
    updateMedicaldsrstockmovTypeUsingPUT = ({ medicaldsrstockmovTypeDTO }: UpdateMedicaldsrstockmovTypeUsingPUTRequest): Observable<void> => {
        throwIfNullOrUndefined(medicaldsrstockmovTypeDTO, 'updateMedicaldsrstockmovTypeUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            path: '/medstockmovementtype',
            method: 'PUT',
            headers,
            body: medicaldsrstockmovTypeDTO,
        });
    };

}
