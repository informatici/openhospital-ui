// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    DeliveryTypeDTO,
} from '../models';

export interface DeleteDeliveryTypeUsingDELETERequest {
    code: string;
}

export interface NewDeliveryTypeUsingPOSTRequest {
    dlvrTypeDTO: DeliveryTypeDTO;
}

export interface UpdateDeliveryTypetUsingPUTRequest {
    code: DeliveryTypeDTO;
}

/**
 * no description
 */
export class DeliveryTypeControllerApi extends BaseAPI {

    /**
     * deleteDeliveryType
     */
    deleteDeliveryTypeUsingDELETE = ({ code }: DeleteDeliveryTypeUsingDELETERequest): Observable<boolean> => {
        throwIfNullOrUndefined(code, 'deleteDeliveryTypeUsingDELETE');

        return this.request<boolean>({
            path: '/deliverytypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
        });
    };

    /**
     * getDeliveryTypes
     */
    getDeliveryTypesUsingGET = (): Observable<Array<DeliveryTypeDTO>> => {
        return this.request<Array<DeliveryTypeDTO>>({
            path: '/deliverytypes',
            method: 'GET',
        });
    };

    /**
     * newDeliveryType
     */
    newDeliveryTypeUsingPOST = ({ dlvrTypeDTO }: NewDeliveryTypeUsingPOSTRequest): Observable<string> => {
        throwIfNullOrUndefined(dlvrTypeDTO, 'newDeliveryTypeUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<string>({
            path: '/deliverytypes',
            method: 'POST',
            headers,
            body: dlvrTypeDTO,
        });
    };

    /**
     * updateDeliveryTypet
     */
    updateDeliveryTypetUsingPUT = ({ code }: UpdateDeliveryTypetUsingPUTRequest): Observable<string> => {
        throwIfNullOrUndefined(code, 'updateDeliveryTypetUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<string>({
            path: '/deliverytypes',
            method: 'PUT',
            headers,
            body: code,
        });
    };

}
