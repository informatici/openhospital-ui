// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    SupplierDTO,
} from '../models';

export interface GetSuppliersUsingGETRequest {
    id: number;
}

export interface GetSuppliersUsingGET1Request {
    excludeDeleted?: boolean;
}

export interface SaveSupplierUsingPOSTRequest {
    suplierDTO: SupplierDTO;
}

export interface UpdateSupplierUsingPUTRequest {
    suplierDTO: SupplierDTO;
}

/**
 * no description
 */
export class SupplierControllerApi extends BaseAPI {

    /**
     * getSuppliers
     */
    getSuppliersUsingGET = ({ id }: GetSuppliersUsingGETRequest): Observable<SupplierDTO> => {
        throwIfNullOrUndefined(id, 'getSuppliersUsingGET');

        return this.request<SupplierDTO>({
            path: '/suppliers/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        });
    };

    /**
     * getSuppliers
     */
    getSuppliersUsingGET1 = ({ excludeDeleted }: GetSuppliersUsingGET1Request): Observable<Array<SupplierDTO>> => {

        const query: HttpQuery = {};

        if (excludeDeleted != null) { query['exclude_deleted'] = excludeDeleted; }

        return this.request<Array<SupplierDTO>>({
            path: '/suppliers',
            method: 'GET',
            query,
        });
    };

    /**
     * saveSupplier
     */
    saveSupplierUsingPOST = ({ suplierDTO }: SaveSupplierUsingPOSTRequest): Observable<boolean> => {
        throwIfNullOrUndefined(suplierDTO, 'saveSupplierUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<boolean>({
            path: '/suppliers',
            method: 'POST',
            headers,
            body: suplierDTO,
        });
    };

    /**
     * updateSupplier
     */
    updateSupplierUsingPUT = ({ suplierDTO }: UpdateSupplierUsingPUTRequest): Observable<boolean> => {
        throwIfNullOrUndefined(suplierDTO, 'updateSupplierUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<boolean>({
            path: '/suppliers',
            method: 'PUT',
            headers,
            body: suplierDTO,
        });
    };

}
