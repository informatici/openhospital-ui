// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    PatientDTO,
    ResponseEntity,
} from '../models';

export interface DeletePatientUsingDELETERequest {
    code: number;
}

export interface GetPatientUsingGETRequest {
    code: number;
}

export interface GetPatientsUsingGETRequest {
    page?: number;
    size?: number;
}

export interface NewPatientUsingPOSTRequest {
    newPatient: PatientDTO;
}

export interface SearchPatientUsingGETRequest {
    firstName?: string;
    secondName?: string;
    birthDate?: string;
    address?: string;
}

export interface UpdatePatientUsingPUTRequest {
    code: number;
    updatePatient: PatientDTO;
}

/**
 * no description
 */
export class PatientControllerApi extends BaseAPI {

    /**
     * deletePatient
     */
    deletePatientUsingDELETE = ({ code }: DeletePatientUsingDELETERequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(code, 'deletePatientUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ResponseEntity>({
            path: '/patients/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        });
    };

    /**
     * getPatient
     */
    getPatientUsingGET = ({ code }: GetPatientUsingGETRequest): Observable<PatientDTO> => {
        throwIfNullOrUndefined(code, 'getPatientUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<PatientDTO>({
            path: '/patients/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        });
    };

    /**
     * getPatients
     */
    getPatientsUsingGET = ({ page, size }: GetPatientsUsingGETRequest): Observable<Array<PatientDTO>> => {

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (size != null) { query['size'] = size; }

        return this.request<Array<PatientDTO>>({
            path: '/patients',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * newPatient
     */
    newPatientUsingPOST = ({ newPatient }: NewPatientUsingPOSTRequest): Observable<number> => {
        throwIfNullOrUndefined(newPatient, 'newPatientUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<number>({
            path: '/patients',
            method: 'POST',
            headers,
            body: newPatient,
        });
    };

    /**
     * searchPatient
     */
    searchPatientUsingGET = ({ firstName, secondName, birthDate, address }: SearchPatientUsingGETRequest): Observable<Array<PatientDTO>> => {

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (firstName != null) { query['firstName'] = firstName; }
        if (secondName != null) { query['secondName'] = secondName; }
        if (birthDate != null) { query['birthDate'] = birthDate; }
        if (address != null) { query['address'] = address; }

        return this.request<Array<PatientDTO>>({
            path: '/patients/search',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * updatePatient
     */
    updatePatientUsingPUT = ({ code, updatePatient }: UpdatePatientUsingPUTRequest): Observable<number> => {
        throwIfNullOrUndefined(code, 'updatePatientUsingPUT');
        throwIfNullOrUndefined(updatePatient, 'updatePatientUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<number>({
            path: '/patients/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: updatePatient,
        });
    };

}
