// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    MovementTypeDTO,
} from '../models';

export interface DeleteMedicalDsrStockMovementTypeRequest {
    code: string;
}

export interface GetMovementTypeRequest {
    code: string;
}

export interface IsCodeUsedRequest {
    code: string;
}

export interface NewMedicalDsrStockMovementTypeRequest {
    movementTypeDTO: MovementTypeDTO;
}

export interface UpdateMedicalDsrStockMovementTypeRequest {
    movementTypeDTO: MovementTypeDTO;
}

/**
 * no description
 */
export class MedicalStockMovementTypeApi extends BaseAPI {

    /**
     */
    deleteMedicalDsrStockMovementType({ code }: DeleteMedicalDsrStockMovementTypeRequest): Observable<boolean>
    deleteMedicalDsrStockMovementType({ code }: DeleteMedicalDsrStockMovementTypeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteMedicalDsrStockMovementType({ code }: DeleteMedicalDsrStockMovementTypeRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteMedicalDsrStockMovementType');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/medstockmovementtypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getMedicalDsrStockMovementType(): Observable<Array<MovementTypeDTO>>
    getMedicalDsrStockMovementType(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementTypeDTO>>>
    getMedicalDsrStockMovementType(opts?: OperationOpts): Observable<Array<MovementTypeDTO> | RawAjaxResponse<Array<MovementTypeDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<MovementTypeDTO>>({
            url: '/medstockmovementtypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getMovementType({ code }: GetMovementTypeRequest): Observable<MovementTypeDTO>
    getMovementType({ code }: GetMovementTypeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MovementTypeDTO>>
    getMovementType({ code }: GetMovementTypeRequest, opts?: OperationOpts): Observable<MovementTypeDTO | RawAjaxResponse<MovementTypeDTO>> {
        throwIfNullOrUndefined(code, 'code', 'getMovementType');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<MovementTypeDTO>({
            url: '/medstockmovementtypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    isCodeUsed({ code }: IsCodeUsedRequest): Observable<boolean>
    isCodeUsed({ code }: IsCodeUsedRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    isCodeUsed({ code }: IsCodeUsedRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'isCodeUsed');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/medstockmovementtypes/check/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    newMedicalDsrStockMovementType({ movementTypeDTO }: NewMedicalDsrStockMovementTypeRequest): Observable<MovementTypeDTO>
    newMedicalDsrStockMovementType({ movementTypeDTO }: NewMedicalDsrStockMovementTypeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MovementTypeDTO>>
    newMedicalDsrStockMovementType({ movementTypeDTO }: NewMedicalDsrStockMovementTypeRequest, opts?: OperationOpts): Observable<MovementTypeDTO | RawAjaxResponse<MovementTypeDTO>> {
        throwIfNullOrUndefined(movementTypeDTO, 'movementTypeDTO', 'newMedicalDsrStockMovementType');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<MovementTypeDTO>({
            url: '/medstockmovementtypes',
            method: 'POST',
            headers,
            body: movementTypeDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    updateMedicalDsrStockMovementType({ movementTypeDTO }: UpdateMedicalDsrStockMovementTypeRequest): Observable<MovementTypeDTO>
    updateMedicalDsrStockMovementType({ movementTypeDTO }: UpdateMedicalDsrStockMovementTypeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MovementTypeDTO>>
    updateMedicalDsrStockMovementType({ movementTypeDTO }: UpdateMedicalDsrStockMovementTypeRequest, opts?: OperationOpts): Observable<MovementTypeDTO | RawAjaxResponse<MovementTypeDTO>> {
        throwIfNullOrUndefined(movementTypeDTO, 'movementTypeDTO', 'updateMedicalDsrStockMovementType');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<MovementTypeDTO>({
            url: '/medstockmovementtypes',
            method: 'PUT',
            headers,
            body: movementTypeDTO,
        }, opts?.responseOpts);
    };

}
