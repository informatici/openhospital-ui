// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    BillDTO,
    BillItemsDTO,
    BillPaymentsDTO,
    FullBillDTO,
    ResponseEntity,
} from '../models';

export interface DeleteBillUsingDELETERequest {
    id: number;
}

export interface GetBillUsingGETRequest {
    id: number;
}

export interface GetItemsUsingGETRequest {
    billId: number;
}

export interface GetPaymentsByBillIdUsingGETRequest {
    billId: number;
}

export interface GetPendingBillsAffiliateUsingGETRequest {
    patientCode: number;
}

export interface GetPendingBillsUsingGETRequest {
    patientCode: number;
}

export interface NewBillUsingPOSTRequest {
    newBillDto: FullBillDTO;
}

export interface SearchBillsByPaymentsUsingPOSTRequest {
    paymentsDTO: Array<BillPaymentsDTO>;
}

export interface SearchBillsPaymentsUsingGETRequest {
    datefrom: string;
    dateto: string;
    patientCode?: number;
}

export interface SearchBillsUsingGETRequest {
    datefrom: string;
    dateto: string;
    patientCode?: number;
}

export interface SearchBillsUsingPOSTRequest {
    datefrom: string;
    dateto: string;
    billItemDTO: BillItemsDTO;
}

export interface UpdateBillUsingPUTRequest {
    id: number;
    odBillDto: FullBillDTO;
}

/**
 * no description
 */
export class BillControllerApi extends BaseAPI {

    /**
     * deleteBill
     */
    deleteBillUsingDELETE = ({ id }: DeleteBillUsingDELETERequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(id, 'deleteBillUsingDELETE');

        return this.request<ResponseEntity>({
            path: '/bills/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        });
    };

    /**
     * getBill
     */
    getBillUsingGET = ({ id }: GetBillUsingGETRequest): Observable<BillDTO> => {
        throwIfNullOrUndefined(id, 'getBillUsingGET');

        return this.request<BillDTO>({
            path: '/bills/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        });
    };

    /**
     * getDistinctItems
     */
    getDistinctItemsUsingGET = (): Observable<Array<BillItemsDTO>> => {
        return this.request<Array<BillItemsDTO>>({
            path: '/bills/items',
            method: 'GET',
        });
    };

    /**
     * getItems
     */
    getItemsUsingGET = ({ billId }: GetItemsUsingGETRequest): Observable<Array<BillItemsDTO>> => {
        throwIfNullOrUndefined(billId, 'getItemsUsingGET');

        return this.request<Array<BillItemsDTO>>({
            path: '/bills/items/{bill_id}'.replace('{bill_id}', encodeURI(billId)),
            method: 'GET',
        });
    };

    /**
     * getPaymentsByBillId
     */
    getPaymentsByBillIdUsingGET = ({ billId }: GetPaymentsByBillIdUsingGETRequest): Observable<Array<BillPaymentsDTO>> => {
        throwIfNullOrUndefined(billId, 'getPaymentsByBillIdUsingGET');

        return this.request<Array<BillPaymentsDTO>>({
            path: '/bills/payments/{bill_id}'.replace('{bill_id}', encodeURI(billId)),
            method: 'GET',
        });
    };

    /**
     * getPendingBillsAffiliate
     */
    getPendingBillsAffiliateUsingGET = ({ patientCode }: GetPendingBillsAffiliateUsingGETRequest): Observable<Array<BillDTO>> => {
        throwIfNullOrUndefined(patientCode, 'getPendingBillsAffiliateUsingGET');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'patient_code': patientCode,
        };

        return this.request<Array<BillDTO>>({
            path: '/bills/pending/affiliate',
            method: 'GET',
            query,
        });
    };

    /**
     * getPendingBills
     */
    getPendingBillsUsingGET = ({ patientCode }: GetPendingBillsUsingGETRequest): Observable<Array<BillDTO>> => {
        throwIfNullOrUndefined(patientCode, 'getPendingBillsUsingGET');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'patient_code': patientCode,
        };

        return this.request<Array<BillDTO>>({
            path: '/bills/pending',
            method: 'GET',
            query,
        });
    };

    /**
     * newBill
     */
    newBillUsingPOST = ({ newBillDto }: NewBillUsingPOSTRequest): Observable<FullBillDTO> => {
        throwIfNullOrUndefined(newBillDto, 'newBillUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<FullBillDTO>({
            path: '/bills',
            method: 'POST',
            headers,
            body: newBillDto,
        });
    };

    /**
     * searchBillsByPayments
     */
    searchBillsByPaymentsUsingPOST = ({ paymentsDTO }: SearchBillsByPaymentsUsingPOSTRequest): Observable<Array<BillDTO>> => {
        throwIfNullOrUndefined(paymentsDTO, 'searchBillsByPaymentsUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<BillDTO>>({
            path: '/bills/search/by/payments',
            method: 'POST',
            headers,
            body: paymentsDTO,
        });
    };

    /**
     * searchBillsPayments
     */
    searchBillsPaymentsUsingGET = ({ datefrom, dateto, patientCode }: SearchBillsPaymentsUsingGETRequest): Observable<Array<BillPaymentsDTO>> => {
        throwIfNullOrUndefined(datefrom, 'searchBillsPaymentsUsingGET');
        throwIfNullOrUndefined(dateto, 'searchBillsPaymentsUsingGET');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'datefrom': (datefrom as any).toISOString(),
            'dateto': (dateto as any).toISOString(),
        };

        if (patientCode != null) { query['patient_code'] = patientCode; }

        return this.request<Array<BillPaymentsDTO>>({
            path: '/bills/payments',
            method: 'GET',
            query,
        });
    };

    /**
     * searchBills
     */
    searchBillsUsingGET = ({ datefrom, dateto, patientCode }: SearchBillsUsingGETRequest): Observable<Array<BillDTO>> => {
        throwIfNullOrUndefined(datefrom, 'searchBillsUsingGET');
        throwIfNullOrUndefined(dateto, 'searchBillsUsingGET');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'datefrom': (datefrom as any).toISOString(),
            'dateto': (dateto as any).toISOString(),
        };

        if (patientCode != null) { query['patient_code'] = patientCode; }

        return this.request<Array<BillDTO>>({
            path: '/bills',
            method: 'GET',
            query,
        });
    };

    /**
     * searchBills
     */
    searchBillsUsingPOST = ({ datefrom, dateto, billItemDTO }: SearchBillsUsingPOSTRequest): Observable<Array<BillDTO>> => {
        throwIfNullOrUndefined(datefrom, 'searchBillsUsingPOST');
        throwIfNullOrUndefined(dateto, 'searchBillsUsingPOST');
        throwIfNullOrUndefined(billItemDTO, 'searchBillsUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'datefrom': (datefrom as any).toISOString(),
            'dateto': (dateto as any).toISOString(),
        };

        return this.request<Array<BillDTO>>({
            path: '/bills/search/by/item',
            method: 'POST',
            headers,
            query,
            body: billItemDTO,
        });
    };

    /**
     * updateBill
     */
    updateBillUsingPUT = ({ id, odBillDto }: UpdateBillUsingPUTRequest): Observable<FullBillDTO> => {
        throwIfNullOrUndefined(id, 'updateBillUsingPUT');
        throwIfNullOrUndefined(odBillDto, 'updateBillUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<FullBillDTO>({
            path: '/bills/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: odBillDto,
        });
    };

}
