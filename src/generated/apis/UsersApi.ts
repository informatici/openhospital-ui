// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    PermissionDTO,
    UserDTO,
    UserProfileDTO,
} from '../models';

export interface DeleteUserRequest {
    username: string;
}

export interface GetUserRequest {
    groupId?: string;
}

export interface GetUserByNameRequest {
    username: string;
}

export interface NewUserRequest {
    userDTO: UserDTO;
}

export interface RetrievePermissionsByUsernameRequest {
    username: string;
}

export interface UpdateProfileRequest {
    userDTO: UserDTO;
}

export interface UpdateUserRequest {
    username: string;
    userDTO: UserDTO;
}

/**
 * no description
 */
export class UsersApi extends BaseAPI {

    /**
     */
    deleteUser({ username }: DeleteUserRequest): Observable<void>
    deleteUser({ username }: DeleteUserRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    deleteUser({ username }: DeleteUserRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(username, 'username', 'deleteUser');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/users/{username}'.replace('{username}', encodeURI(username)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getUser({ groupId }: GetUserRequest): Observable<Array<UserDTO>>
    getUser({ groupId }: GetUserRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<UserDTO>>>
    getUser({ groupId }: GetUserRequest, opts?: OperationOpts): Observable<Array<UserDTO> | RawAjaxResponse<Array<UserDTO>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (groupId != null) { query['group_id'] = groupId; }

        return this.request<Array<UserDTO>>({
            url: '/users',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getUserByName({ username }: GetUserByNameRequest): Observable<UserDTO>
    getUserByName({ username }: GetUserByNameRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserDTO>>
    getUserByName({ username }: GetUserByNameRequest, opts?: OperationOpts): Observable<UserDTO | RawAjaxResponse<UserDTO>> {
        throwIfNullOrUndefined(username, 'username', 'getUserByName');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserDTO>({
            url: '/users/{username}'.replace('{username}', encodeURI(username)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    newUser({ userDTO }: NewUserRequest): Observable<UserDTO>
    newUser({ userDTO }: NewUserRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserDTO>>
    newUser({ userDTO }: NewUserRequest, opts?: OperationOpts): Observable<UserDTO | RawAjaxResponse<UserDTO>> {
        throwIfNullOrUndefined(userDTO, 'userDTO', 'newUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserDTO>({
            url: '/users',
            method: 'POST',
            headers,
            body: userDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    retrievePermissionsByUsername({ username }: RetrievePermissionsByUsernameRequest): Observable<Array<PermissionDTO>>
    retrievePermissionsByUsername({ username }: RetrievePermissionsByUsernameRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<PermissionDTO>>>
    retrievePermissionsByUsername({ username }: RetrievePermissionsByUsernameRequest, opts?: OperationOpts): Observable<Array<PermissionDTO> | RawAjaxResponse<Array<PermissionDTO>>> {
        throwIfNullOrUndefined(username, 'username', 'retrievePermissionsByUsername');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<PermissionDTO>>({
            url: '/users/{username}/permissions'.replace('{username}', encodeURI(username)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    retrieveProfileByCurrentLoggedInUser(): Observable<UserProfileDTO>
    retrieveProfileByCurrentLoggedInUser(opts?: OperationOpts): Observable<RawAjaxResponse<UserProfileDTO>>
    retrieveProfileByCurrentLoggedInUser(opts?: OperationOpts): Observable<UserProfileDTO | RawAjaxResponse<UserProfileDTO>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserProfileDTO>({
            url: '/users/me',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    updateProfile({ userDTO }: UpdateProfileRequest): Observable<UserProfileDTO>
    updateProfile({ userDTO }: UpdateProfileRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserProfileDTO>>
    updateProfile({ userDTO }: UpdateProfileRequest, opts?: OperationOpts): Observable<UserProfileDTO | RawAjaxResponse<UserProfileDTO>> {
        throwIfNullOrUndefined(userDTO, 'userDTO', 'updateProfile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserProfileDTO>({
            url: '/users/me',
            method: 'PUT',
            headers,
            body: userDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    updateUser({ username, userDTO }: UpdateUserRequest): Observable<UserDTO>
    updateUser({ username, userDTO }: UpdateUserRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserDTO>>
    updateUser({ username, userDTO }: UpdateUserRequest, opts?: OperationOpts): Observable<UserDTO | RawAjaxResponse<UserDTO>> {
        throwIfNullOrUndefined(username, 'username', 'updateUser');
        throwIfNullOrUndefined(userDTO, 'userDTO', 'updateUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserDTO>({
            url: '/users/{username}'.replace('{username}', encodeURI(username)),
            method: 'PUT',
            headers,
            body: userDTO,
        }, opts?.responseOpts);
    };

}
