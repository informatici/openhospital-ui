// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    LitePermissionDTO,
    UserDTO,
    UserGroupDTO,
    UserProfileDTO,
    UserSettingDTO,
} from '../models';

export interface AssignPermissionRequest {
    groupCode: string;
    id: number;
}

export interface DeleteGroupRequest {
    groupCode: string;
}

export interface DeleteUserRequest {
    username: string;
}

export interface DeleteUserSettingRequest {
    id: number;
}

export interface GetUserRequest {
    groupId?: string;
}

export interface GetUserByNameRequest {
    username: string;
}

export interface GetUserGroup1Request {
    groupCode: string;
}

export interface GetUserSettingByIdRequest {
    id: number;
}

export interface GetUserSettingByUserRequest {
    userName: string;
    configName: string;
}

export interface NewUserRequest {
    userDTO: UserDTO;
}

export interface NewUserGroupRequest {
    userGroupDTO: UserGroupDTO;
}

export interface NewUserSettingsRequest {
    userSettingDTO: UserSettingDTO;
}

export interface RetrievePermissionsByUsernameRequest {
    username: string;
}

export interface RevokePermissionRequest {
    groupCode: string;
    id: number;
}

export interface UpdateUserRequest {
    userDTO: UserDTO;
    password?: boolean;
}

export interface UpdateUserGroupRequest {
    userGroupDTO: UserGroupDTO;
}

export interface UpdateUserSettingsRequest {
    id: number;
    userSettingDTO: UserSettingDTO;
}

/**
 * no description
 */
export class UsersApi extends BaseAPI {

    /**
     */
    assignPermission({ groupCode, id }: AssignPermissionRequest): Observable<boolean>
    assignPermission({ groupCode, id }: AssignPermissionRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    assignPermission({ groupCode, id }: AssignPermissionRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(groupCode, 'groupCode', 'assignPermission');
        throwIfNullOrUndefined(id, 'id', 'assignPermission');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/users/groups/{group_code}/permissions/{id}'.replace('{group_code}', encodeURI(groupCode)).replace('{id}', encodeURI(id)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    deleteGroup({ groupCode }: DeleteGroupRequest): Observable<boolean>
    deleteGroup({ groupCode }: DeleteGroupRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteGroup({ groupCode }: DeleteGroupRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(groupCode, 'groupCode', 'deleteGroup');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/users/groups/{group_code}'.replace('{group_code}', encodeURI(groupCode)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    deleteUser({ username }: DeleteUserRequest): Observable<boolean>
    deleteUser({ username }: DeleteUserRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteUser({ username }: DeleteUserRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(username, 'username', 'deleteUser');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/users/{username}'.replace('{username}', encodeURI(username)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    deleteUserSetting({ id }: DeleteUserSettingRequest): Observable<boolean>
    deleteUserSetting({ id }: DeleteUserSettingRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteUserSetting({ id }: DeleteUserSettingRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(id, 'id', 'deleteUserSetting');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/users/settings/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getUser({ groupId }: GetUserRequest): Observable<Array<UserDTO>>
    getUser({ groupId }: GetUserRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<UserDTO>>>
    getUser({ groupId }: GetUserRequest, opts?: OperationOpts): Observable<Array<UserDTO> | RawAjaxResponse<Array<UserDTO>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (groupId != null) { query['group_id'] = groupId; }

        return this.request<Array<UserDTO>>({
            url: '/users',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getUserByName({ username }: GetUserByNameRequest): Observable<UserDTO>
    getUserByName({ username }: GetUserByNameRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserDTO>>
    getUserByName({ username }: GetUserByNameRequest, opts?: OperationOpts): Observable<UserDTO | RawAjaxResponse<UserDTO>> {
        throwIfNullOrUndefined(username, 'username', 'getUserByName');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserDTO>({
            url: '/users/{username}'.replace('{username}', encodeURI(username)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getUserGroup(): Observable<Array<UserGroupDTO>>
    getUserGroup(opts?: OperationOpts): Observable<RawAjaxResponse<Array<UserGroupDTO>>>
    getUserGroup(opts?: OperationOpts): Observable<Array<UserGroupDTO> | RawAjaxResponse<Array<UserGroupDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<UserGroupDTO>>({
            url: '/users/groups',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getUserGroup1({ groupCode }: GetUserGroup1Request): Observable<UserGroupDTO>
    getUserGroup1({ groupCode }: GetUserGroup1Request, opts?: OperationOpts): Observable<RawAjaxResponse<UserGroupDTO>>
    getUserGroup1({ groupCode }: GetUserGroup1Request, opts?: OperationOpts): Observable<UserGroupDTO | RawAjaxResponse<UserGroupDTO>> {
        throwIfNullOrUndefined(groupCode, 'groupCode', 'getUserGroup1');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserGroupDTO>({
            url: '/users/groups/{group_code}'.replace('{group_code}', encodeURI(groupCode)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getUserSettingById({ id }: GetUserSettingByIdRequest): Observable<UserSettingDTO>
    getUserSettingById({ id }: GetUserSettingByIdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserSettingDTO>>
    getUserSettingById({ id }: GetUserSettingByIdRequest, opts?: OperationOpts): Observable<UserSettingDTO | RawAjaxResponse<UserSettingDTO>> {
        throwIfNullOrUndefined(id, 'id', 'getUserSettingById');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserSettingDTO>({
            url: '/users/settings/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getUserSettingByUser({ userName, configName }: GetUserSettingByUserRequest): Observable<UserSettingDTO>
    getUserSettingByUser({ userName, configName }: GetUserSettingByUserRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserSettingDTO>>
    getUserSettingByUser({ userName, configName }: GetUserSettingByUserRequest, opts?: OperationOpts): Observable<UserSettingDTO | RawAjaxResponse<UserSettingDTO>> {
        throwIfNullOrUndefined(userName, 'userName', 'getUserSettingByUser');
        throwIfNullOrUndefined(configName, 'configName', 'getUserSettingByUser');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserSettingDTO>({
            url: '/users/{userName}/settings/{configName}'.replace('{userName}', encodeURI(userName)).replace('{configName}', encodeURI(configName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getUserSettings(): Observable<Array<UserSettingDTO>>
    getUserSettings(opts?: OperationOpts): Observable<RawAjaxResponse<Array<UserSettingDTO>>>
    getUserSettings(opts?: OperationOpts): Observable<Array<UserSettingDTO> | RawAjaxResponse<Array<UserSettingDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<UserSettingDTO>>({
            url: '/users/settings',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    newUser({ userDTO }: NewUserRequest): Observable<boolean>
    newUser({ userDTO }: NewUserRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    newUser({ userDTO }: NewUserRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(userDTO, 'userDTO', 'newUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/users',
            method: 'POST',
            headers,
            body: userDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    newUserGroup({ userGroupDTO }: NewUserGroupRequest): Observable<boolean>
    newUserGroup({ userGroupDTO }: NewUserGroupRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    newUserGroup({ userGroupDTO }: NewUserGroupRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(userGroupDTO, 'userGroupDTO', 'newUserGroup');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/users/groups',
            method: 'POST',
            headers,
            body: userGroupDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    newUserSettings({ userSettingDTO }: NewUserSettingsRequest): Observable<UserSettingDTO>
    newUserSettings({ userSettingDTO }: NewUserSettingsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserSettingDTO>>
    newUserSettings({ userSettingDTO }: NewUserSettingsRequest, opts?: OperationOpts): Observable<UserSettingDTO | RawAjaxResponse<UserSettingDTO>> {
        throwIfNullOrUndefined(userSettingDTO, 'userSettingDTO', 'newUserSettings');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserSettingDTO>({
            url: '/users/settings',
            method: 'POST',
            headers,
            body: userSettingDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    retrievePermissionsByCurrentLoggedInUser(): Observable<Array<LitePermissionDTO>>
    retrievePermissionsByCurrentLoggedInUser(opts?: OperationOpts): Observable<RawAjaxResponse<Array<LitePermissionDTO>>>
    retrievePermissionsByCurrentLoggedInUser(opts?: OperationOpts): Observable<Array<LitePermissionDTO> | RawAjaxResponse<Array<LitePermissionDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<LitePermissionDTO>>({
            url: '/users/permissions',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    retrievePermissionsByUsername({ username }: RetrievePermissionsByUsernameRequest): Observable<Array<LitePermissionDTO>>
    retrievePermissionsByUsername({ username }: RetrievePermissionsByUsernameRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<LitePermissionDTO>>>
    retrievePermissionsByUsername({ username }: RetrievePermissionsByUsernameRequest, opts?: OperationOpts): Observable<Array<LitePermissionDTO> | RawAjaxResponse<Array<LitePermissionDTO>>> {
        throwIfNullOrUndefined(username, 'username', 'retrievePermissionsByUsername');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<LitePermissionDTO>>({
            url: '/users/permissions/username/{username}'.replace('{username}', encodeURI(username)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    retrieveProfileByCurrentLoggedInUser(): Observable<UserProfileDTO>
    retrieveProfileByCurrentLoggedInUser(opts?: OperationOpts): Observable<RawAjaxResponse<UserProfileDTO>>
    retrieveProfileByCurrentLoggedInUser(opts?: OperationOpts): Observable<UserProfileDTO | RawAjaxResponse<UserProfileDTO>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserProfileDTO>({
            url: '/users/me',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    revokePermission({ groupCode, id }: RevokePermissionRequest): Observable<boolean>
    revokePermission({ groupCode, id }: RevokePermissionRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    revokePermission({ groupCode, id }: RevokePermissionRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(groupCode, 'groupCode', 'revokePermission');
        throwIfNullOrUndefined(id, 'id', 'revokePermission');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/users/groups/{group_code}/permissions/{id}'.replace('{group_code}', encodeURI(groupCode)).replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    updateUser({ userDTO, password }: UpdateUserRequest): Observable<boolean>
    updateUser({ userDTO, password }: UpdateUserRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    updateUser({ userDTO, password }: UpdateUserRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(userDTO, 'userDTO', 'updateUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (password != null) { query['password'] = password; }

        return this.request<boolean>({
            url: '/users',
            method: 'PUT',
            headers,
            query,
            body: userDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    updateUserGroup({ userGroupDTO }: UpdateUserGroupRequest): Observable<boolean>
    updateUserGroup({ userGroupDTO }: UpdateUserGroupRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    updateUserGroup({ userGroupDTO }: UpdateUserGroupRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(userGroupDTO, 'userGroupDTO', 'updateUserGroup');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/users/groups',
            method: 'PUT',
            headers,
            body: userGroupDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    updateUserSettings({ id, userSettingDTO }: UpdateUserSettingsRequest): Observable<UserSettingDTO>
    updateUserSettings({ id, userSettingDTO }: UpdateUserSettingsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserSettingDTO>>
    updateUserSettings({ id, userSettingDTO }: UpdateUserSettingsRequest, opts?: OperationOpts): Observable<UserSettingDTO | RawAjaxResponse<UserSettingDTO>> {
        throwIfNullOrUndefined(id, 'id', 'updateUserSettings');
        throwIfNullOrUndefined(userSettingDTO, 'userSettingDTO', 'updateUserSettings');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<UserSettingDTO>({
            url: '/users/settings/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: userSettingDTO,
        }, opts?.responseOpts);
    };

}
