// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    MedicalTypeDTO,
} from '../models';

export interface CreateMedicalTypeUsingPOSTRequest {
    medicalTypeDTO: MedicalTypeDTO;
}

export interface DeleteMedicalTypeUsingDELETERequest {
    code: string;
}

export interface IsCodeUsedUsingGET1Request {
    code: string;
}

export interface UpdateMedicalTypeUsingPUTRequest {
    medicalTypeDTO: MedicalTypeDTO;
}

/**
 * no description
 */
export class MedicalTypeControllerApi extends BaseAPI {

    /**
     * createMedicalType
     */
    createMedicalTypeUsingPOST = ({ medicalTypeDTO }: CreateMedicalTypeUsingPOSTRequest): Observable<void> => {
        throwIfNullOrUndefined(medicalTypeDTO, 'createMedicalTypeUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            path: '/medicaltypes',
            method: 'POST',
            headers,
            body: medicalTypeDTO,
        });
    };

    /**
     * deleteMedicalType
     */
    deleteMedicalTypeUsingDELETE = ({ code }: DeleteMedicalTypeUsingDELETERequest): Observable<boolean> => {
        throwIfNullOrUndefined(code, 'deleteMedicalTypeUsingDELETE');

        return this.request<boolean>({
            path: '/medicaltypes/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
        });
    };

    /**
     * getMedicalTypes
     */
    getMedicalTypesUsingGET = (): Observable<Array<MedicalTypeDTO>> => {
        return this.request<Array<MedicalTypeDTO>>({
            path: '/medicaltypes',
            method: 'GET',
        });
    };

    /**
     * isCodeUsed
     */
    isCodeUsedUsingGET1 = ({ code }: IsCodeUsedUsingGET1Request): Observable<boolean> => {
        throwIfNullOrUndefined(code, 'isCodeUsedUsingGET1');

        return this.request<boolean>({
            path: '/medicaltypes/check/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
        });
    };

    /**
     * updateMedicalType
     */
    updateMedicalTypeUsingPUT = ({ medicalTypeDTO }: UpdateMedicalTypeUsingPUTRequest): Observable<void> => {
        throwIfNullOrUndefined(medicalTypeDTO, 'updateMedicalTypeUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            path: '/medicaltypes',
            method: 'PUT',
            headers,
            body: medicalTypeDTO,
        });
    };

}
