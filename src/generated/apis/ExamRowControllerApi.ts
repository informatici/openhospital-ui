// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    ExamRowDTO,
    ResponseEntity,
} from '../models';

export interface DeleteExamUsingDELETE1Request {
    code: number;
}

export interface GetExamRowsByCodeAndDescriptionUsingGETRequest {
    code: number;
    description: string;
}

export interface GetExamRowsByCodeUsingGETRequest {
    code: number;
}

export interface GetExamRowsByExamCodeUsingGETRequest {
    examCode: string;
}

export interface NewExamRowUsingPOSTRequest {
    examRowDTO: ExamRowDTO;
}

/**
 * no description
 */
export class ExamRowControllerApi extends BaseAPI {

    /**
     * deleteExam
     */
    deleteExamUsingDELETE1 = ({ code }: DeleteExamUsingDELETE1Request): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(code, 'deleteExamUsingDELETE1');

        return this.request<ResponseEntity>({
            path: '/examrows/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
        });
    };

    /**
     * getExamRowsByCodeAndDescription
     */
    getExamRowsByCodeAndDescriptionUsingGET = ({ code, description }: GetExamRowsByCodeAndDescriptionUsingGETRequest): Observable<Array<ExamRowDTO>> => {
        throwIfNullOrUndefined(code, 'getExamRowsByCodeAndDescriptionUsingGET');
        throwIfNullOrUndefined(description, 'getExamRowsByCodeAndDescriptionUsingGET');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'code': code,
            'description': description,
        };

        return this.request<Array<ExamRowDTO>>({
            path: '/examrows/search',
            method: 'GET',
            query,
        });
    };

    /**
     * getExamRowsByCode
     */
    getExamRowsByCodeUsingGET = ({ code }: GetExamRowsByCodeUsingGETRequest): Observable<Array<ExamRowDTO>> => {
        throwIfNullOrUndefined(code, 'getExamRowsByCodeUsingGET');

        return this.request<Array<ExamRowDTO>>({
            path: '/examrows/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
        });
    };

    /**
     * getExamRowsByExamCode
     */
    getExamRowsByExamCodeUsingGET = ({ examCode }: GetExamRowsByExamCodeUsingGETRequest): Observable<Array<ExamRowDTO>> => {
        throwIfNullOrUndefined(examCode, 'getExamRowsByExamCodeUsingGET');

        return this.request<Array<ExamRowDTO>>({
            path: '/examrows/byExamCode/{examCode}'.replace('{examCode}', encodeURI(examCode)),
            method: 'GET',
        });
    };

    /**
     * getExamRows
     */
    getExamRowsUsingGET = (): Observable<Array<ExamRowDTO>> => {
        return this.request<Array<ExamRowDTO>>({
            path: '/examrows',
            method: 'GET',
        });
    };

    /**
     * newExamRow
     */
    newExamRowUsingPOST = ({ examRowDTO }: NewExamRowUsingPOSTRequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(examRowDTO, 'newExamRowUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ResponseEntity>({
            path: '/examrows',
            method: 'POST',
            headers,
            body: examRowDTO,
        });
    };

}
