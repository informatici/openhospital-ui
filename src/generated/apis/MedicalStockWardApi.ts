// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    MedicalWardDTO,
    MovementWardDTO,
} from '../models';

export interface GetCurrentQuantityInWardRequest {
    wardCode: string;
    medId: number;
}

export interface GetMedicalsWardRequest {
    wardCode: string;
}

export interface GetMovementWardRequest {
    wardCode: string;
    from: string;
    to: string;
}

export interface GetWardMovementsToWardRequest {
    targetWardCode: string;
    from: string;
    to: string;
}

export interface NewMovementWardRequest {
    movementWardDTO: MovementWardDTO;
}

/**
 * no description
 */
export class MedicalStockWardApi extends BaseAPI {

    /**
     */
    getCurrentQuantityInWard({ wardCode, medId }: GetCurrentQuantityInWardRequest): Observable<number>
    getCurrentQuantityInWard({ wardCode, medId }: GetCurrentQuantityInWardRequest, opts?: OperationOpts): Observable<RawAjaxResponse<number>>
    getCurrentQuantityInWard({ wardCode, medId }: GetCurrentQuantityInWardRequest, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {
        throwIfNullOrUndefined(wardCode, 'wardCode', 'getCurrentQuantityInWard');
        throwIfNullOrUndefined(medId, 'medId', 'getCurrentQuantityInWard');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'med_id': medId,
        };

        return this.request<number>({
            url: '/medicalstockward/current/{ward_code}'.replace('{ward_code}', encodeURI(wardCode)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getMedicalsWard({ wardCode }: GetMedicalsWardRequest): Observable<Array<MedicalWardDTO>>
    getMedicalsWard({ wardCode }: GetMedicalsWardRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MedicalWardDTO>>>
    getMedicalsWard({ wardCode }: GetMedicalsWardRequest, opts?: OperationOpts): Observable<Array<MedicalWardDTO> | RawAjaxResponse<Array<MedicalWardDTO>>> {
        throwIfNullOrUndefined(wardCode, 'wardCode', 'getMedicalsWard');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<MedicalWardDTO>>({
            url: '/medicalstockward/{ward_code}'.replace('{ward_code}', encodeURI(wardCode)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getMovementWard({ wardCode, from, to }: GetMovementWardRequest): Observable<Array<MovementWardDTO>>
    getMovementWard({ wardCode, from, to }: GetMovementWardRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementWardDTO>>>
    getMovementWard({ wardCode, from, to }: GetMovementWardRequest, opts?: OperationOpts): Observable<Array<MovementWardDTO> | RawAjaxResponse<Array<MovementWardDTO>>> {
        throwIfNullOrUndefined(wardCode, 'wardCode', 'getMovementWard');
        throwIfNullOrUndefined(from, 'from', 'getMovementWard');
        throwIfNullOrUndefined(to, 'to', 'getMovementWard');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'from': (from as any).toISOString().split('T')[0],
            'to': (to as any).toISOString().split('T')[0],
        };

        return this.request<Array<MovementWardDTO>>({
            url: '/medicalstockward/movements/{ward_code}'.replace('{ward_code}', encodeURI(wardCode)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getWardMovementsToWard({ targetWardCode, from, to }: GetWardMovementsToWardRequest): Observable<Array<MovementWardDTO>>
    getWardMovementsToWard({ targetWardCode, from, to }: GetWardMovementsToWardRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementWardDTO>>>
    getWardMovementsToWard({ targetWardCode, from, to }: GetWardMovementsToWardRequest, opts?: OperationOpts): Observable<Array<MovementWardDTO> | RawAjaxResponse<Array<MovementWardDTO>>> {
        throwIfNullOrUndefined(targetWardCode, 'targetWardCode', 'getWardMovementsToWard');
        throwIfNullOrUndefined(from, 'from', 'getWardMovementsToWard');
        throwIfNullOrUndefined(to, 'to', 'getWardMovementsToWard');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'from': (from as any).toISOString(),
            'to': (to as any).toISOString(),
        };

        return this.request<Array<MovementWardDTO>>({
            url: '/medicalstockward/movements/to/{target_ward_code}'.replace('{target_ward_code}', encodeURI(targetWardCode)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    newMovementWard({ movementWardDTO }: NewMovementWardRequest): Observable<boolean>
    newMovementWard({ movementWardDTO }: NewMovementWardRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    newMovementWard({ movementWardDTO }: NewMovementWardRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(movementWardDTO, 'movementWardDTO', 'newMovementWard');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/medicalstockward/movements',
            method: 'POST',
            headers,
            body: movementWardDTO,
        }, opts?.responseOpts);
    };

}
