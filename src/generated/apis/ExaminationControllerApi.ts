// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    PatientExaminationDTO,
    ResponseEntity,
} from '../models';

export interface GetByIDUsingGETRequest {
    id: number;
}

export interface GetByPatientIdUsingGETRequest {
    patId: number;
}

export interface GetDefaultPatientExaminationUsingGETRequest {
    patId: number;
}

export interface GetFromLastPatientExaminationUsingGETRequest {
    id: number;
}

export interface GetLastByPatientIdUsingGETRequest {
    patId: number;
}

export interface GetLastNByPatIDUsingGETRequest {
    limit: number;
    patId: number;
}

export interface NewPatientExaminationUsingPOSTRequest {
    newPatientExamination: PatientExaminationDTO;
}

export interface UpdateExaminationUsingPUTRequest {
    id: number;
    dto: PatientExaminationDTO;
}

/**
 * no description
 */
export class ExaminationControllerApi extends BaseAPI {

    /**
     * getByID
     */
    getByIDUsingGET = ({ id }: GetByIDUsingGETRequest): Observable<PatientExaminationDTO> => {
        throwIfNullOrUndefined(id, 'getByIDUsingGET');

        return this.request<PatientExaminationDTO>({
            path: '/examinations/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        });
    };

    /**
     * getByPatientId
     */
    getByPatientIdUsingGET = ({ patId }: GetByPatientIdUsingGETRequest): Observable<Array<PatientExaminationDTO>> => {
        throwIfNullOrUndefined(patId, 'getByPatientIdUsingGET');

        return this.request<Array<PatientExaminationDTO>>({
            path: '/examinations/byPatientId/{patId}'.replace('{patId}', encodeURI(patId)),
            method: 'GET',
        });
    };

    /**
     * getDefaultPatientExamination
     */
    getDefaultPatientExaminationUsingGET = ({ patId }: GetDefaultPatientExaminationUsingGETRequest): Observable<PatientExaminationDTO> => {
        throwIfNullOrUndefined(patId, 'getDefaultPatientExaminationUsingGET');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'patId': patId,
        };

        return this.request<PatientExaminationDTO>({
            path: '/examinations/defaultPatientExamination',
            method: 'GET',
            query,
        });
    };

    /**
     * getFromLastPatientExamination
     */
    getFromLastPatientExaminationUsingGET = ({ id }: GetFromLastPatientExaminationUsingGETRequest): Observable<PatientExaminationDTO> => {
        throwIfNullOrUndefined(id, 'getFromLastPatientExaminationUsingGET');

        return this.request<PatientExaminationDTO>({
            path: '/examinations/fromLastPatientExamination/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        });
    };

    /**
     * getLastByPatientId
     */
    getLastByPatientIdUsingGET = ({ patId }: GetLastByPatientIdUsingGETRequest): Observable<PatientExaminationDTO> => {
        throwIfNullOrUndefined(patId, 'getLastByPatientIdUsingGET');

        return this.request<PatientExaminationDTO>({
            path: '/examinations/lastByPatientId/{patId}'.replace('{patId}', encodeURI(patId)),
            method: 'GET',
        });
    };

    /**
     * getLastNByPatID
     */
    getLastNByPatIDUsingGET = ({ limit, patId }: GetLastNByPatIDUsingGETRequest): Observable<Array<PatientExaminationDTO>> => {
        throwIfNullOrUndefined(limit, 'getLastNByPatIDUsingGET');
        throwIfNullOrUndefined(patId, 'getLastNByPatIDUsingGET');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'limit': limit,
            'patId': patId,
        };

        return this.request<Array<PatientExaminationDTO>>({
            path: '/examinations/lastNByPatId',
            method: 'GET',
            query,
        });
    };

    /**
     * newPatientExamination
     */
    newPatientExaminationUsingPOST = ({ newPatientExamination }: NewPatientExaminationUsingPOSTRequest): Observable<boolean> => {
        throwIfNullOrUndefined(newPatientExamination, 'newPatientExaminationUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<boolean>({
            path: '/examinations',
            method: 'POST',
            headers,
            body: newPatientExamination,
        });
    };

    /**
     * updateExamination
     */
    updateExaminationUsingPUT = ({ id, dto }: UpdateExaminationUsingPUTRequest): Observable<ResponseEntity> => {
        throwIfNullOrUndefined(id, 'updateExaminationUsingPUT');
        throwIfNullOrUndefined(dto, 'updateExaminationUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ResponseEntity>({
            path: '/examinations/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: dto,
        });
    };

}
