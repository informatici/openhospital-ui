// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    OpdDTO,
    OpdWithOperationRowDTO,
    PageOpdDTO,
} from '../models';

export interface DeleteOpdRequest {
    code: number;
}

export interface GetLastOpdRequest {
    patientCode: number;
}

export interface GetOpdByDatesRequest {
    dateFrom: string;
    dateTo: string;
    diseaseTypeCode?: string;
    diseaseCode?: string;
    ageFrom?: number;
    ageTo?: number;
    sex?: string;
    newPatient?: string;
    patientCode?: number;
    page?: number;
    size?: number;
    paged?: boolean;
    wardCode?: string;
}

export interface GetOpdByPatientRequest {
    pcode: number;
}

export interface GetOpdToDayOrWeekRequest {
    oneWeek?: boolean;
}

export interface GetProgYear1Request {
    year: number;
}

export interface IsExistOpdNumRequest {
    opdNum: number;
    year: number;
}

export interface NewOpdRequest {
    opdDTO: OpdDTO;
}

export interface NewOpdWithOperationRowRequest {
    opdWithOperationRowDTO: OpdWithOperationRowDTO;
}

export interface UpdateOpdRequest {
    code: number;
    opdDTO: OpdDTO;
}

export interface UpdateOpdWithOperationRowRequest {
    code: number;
    opdWithOperationRowDTO: OpdWithOperationRowDTO;
}

/**
 * no description
 */
export class OpdsApi extends BaseAPI {

    /**
     */
    deleteOpd({ code }: DeleteOpdRequest): Observable<boolean>
    deleteOpd({ code }: DeleteOpdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteOpd({ code }: DeleteOpdRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteOpd');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/opds/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getLastOpd({ patientCode }: GetLastOpdRequest): Observable<OpdDTO>
    getLastOpd({ patientCode }: GetLastOpdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<OpdDTO>>
    getLastOpd({ patientCode }: GetLastOpdRequest, opts?: OperationOpts): Observable<OpdDTO | RawAjaxResponse<OpdDTO>> {
        throwIfNullOrUndefined(patientCode, 'patientCode', 'getLastOpd');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<OpdDTO>({
            url: '/opds/last/{patientCode}'.replace('{patientCode}', encodeURI(patientCode)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getOpdByDates({ dateFrom, dateTo, diseaseTypeCode, diseaseCode, ageFrom, ageTo, sex, newPatient, patientCode, page, size, paged, wardCode }: GetOpdByDatesRequest): Observable<PageOpdDTO>
    getOpdByDates({ dateFrom, dateTo, diseaseTypeCode, diseaseCode, ageFrom, ageTo, sex, newPatient, patientCode, page, size, paged, wardCode }: GetOpdByDatesRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PageOpdDTO>>
    getOpdByDates({ dateFrom, dateTo, diseaseTypeCode, diseaseCode, ageFrom, ageTo, sex, newPatient, patientCode, page, size, paged, wardCode }: GetOpdByDatesRequest, opts?: OperationOpts): Observable<PageOpdDTO | RawAjaxResponse<PageOpdDTO>> {
        throwIfNullOrUndefined(dateFrom, 'dateFrom', 'getOpdByDates');
        throwIfNullOrUndefined(dateTo, 'dateTo', 'getOpdByDates');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'dateFrom': dateFrom,
            'dateTo': dateTo,
        };

        if (diseaseTypeCode != null) { query['diseaseTypeCode'] = diseaseTypeCode; }
        if (diseaseCode != null) { query['diseaseCode'] = diseaseCode; }
        if (ageFrom != null) { query['ageFrom'] = ageFrom; }
        if (ageTo != null) { query['ageTo'] = ageTo; }
        if (sex != null) { query['sex'] = sex; }
        if (newPatient != null) { query['newPatient'] = newPatient; }
        if (patientCode != null) { query['patientCode'] = patientCode; }
        if (page != null) { query['page'] = page; }
        if (size != null) { query['size'] = size; }
        if (paged != null) { query['paged'] = paged; }
        if (wardCode != null) { query['wardCode'] = wardCode; }

        return this.request<PageOpdDTO>({
            url: '/opds/search',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getOpdByPatient({ pcode }: GetOpdByPatientRequest): Observable<Array<OpdWithOperationRowDTO>>
    getOpdByPatient({ pcode }: GetOpdByPatientRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<OpdWithOperationRowDTO>>>
    getOpdByPatient({ pcode }: GetOpdByPatientRequest, opts?: OperationOpts): Observable<Array<OpdWithOperationRowDTO> | RawAjaxResponse<Array<OpdWithOperationRowDTO>>> {
        throwIfNullOrUndefined(pcode, 'pcode', 'getOpdByPatient');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<OpdWithOperationRowDTO>>({
            url: '/opds/patient/{pcode}'.replace('{pcode}', encodeURI(pcode)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    getOpdToDayOrWeek({ oneWeek }: GetOpdToDayOrWeekRequest): Observable<Array<OpdDTO>>
    getOpdToDayOrWeek({ oneWeek }: GetOpdToDayOrWeekRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<OpdDTO>>>
    getOpdToDayOrWeek({ oneWeek }: GetOpdToDayOrWeekRequest, opts?: OperationOpts): Observable<Array<OpdDTO> | RawAjaxResponse<Array<OpdDTO>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (oneWeek != null) { query['oneWeek'] = oneWeek; }

        return this.request<Array<OpdDTO>>({
            url: '/opds/weekly',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getProgYear1({ year }: GetProgYear1Request): Observable<number>
    getProgYear1({ year }: GetProgYear1Request, opts?: OperationOpts): Observable<RawAjaxResponse<number>>
    getProgYear1({ year }: GetProgYear1Request, opts?: OperationOpts): Observable<number | RawAjaxResponse<number>> {
        throwIfNullOrUndefined(year, 'year', 'getProgYear1');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<number>({
            url: '/opds/ProgYear/{year}'.replace('{year}', encodeURI(year)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    isExistOpdNum({ opdNum, year }: IsExistOpdNumRequest): Observable<boolean>
    isExistOpdNum({ opdNum, year }: IsExistOpdNumRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    isExistOpdNum({ opdNum, year }: IsExistOpdNumRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(opdNum, 'opdNum', 'isExistOpdNum');
        throwIfNullOrUndefined(year, 'year', 'isExistOpdNum');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'opdNum': opdNum,
            'year': year,
        };

        return this.request<boolean>({
            url: '/opds/check/progyear',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    newOpd({ opdDTO }: NewOpdRequest): Observable<OpdDTO>
    newOpd({ opdDTO }: NewOpdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<OpdDTO>>
    newOpd({ opdDTO }: NewOpdRequest, opts?: OperationOpts): Observable<OpdDTO | RawAjaxResponse<OpdDTO>> {
        throwIfNullOrUndefined(opdDTO, 'opdDTO', 'newOpd');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<OpdDTO>({
            url: '/opds',
            method: 'POST',
            headers,
            body: opdDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    newOpdWithOperationRow({ opdWithOperationRowDTO }: NewOpdWithOperationRowRequest): Observable<OpdWithOperationRowDTO>
    newOpdWithOperationRow({ opdWithOperationRowDTO }: NewOpdWithOperationRowRequest, opts?: OperationOpts): Observable<RawAjaxResponse<OpdWithOperationRowDTO>>
    newOpdWithOperationRow({ opdWithOperationRowDTO }: NewOpdWithOperationRowRequest, opts?: OperationOpts): Observable<OpdWithOperationRowDTO | RawAjaxResponse<OpdWithOperationRowDTO>> {
        throwIfNullOrUndefined(opdWithOperationRowDTO, 'opdWithOperationRowDTO', 'newOpdWithOperationRow');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<OpdWithOperationRowDTO>({
            url: '/opds/rows',
            method: 'POST',
            headers,
            body: opdWithOperationRowDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    updateOpd({ code, opdDTO }: UpdateOpdRequest): Observable<OpdDTO>
    updateOpd({ code, opdDTO }: UpdateOpdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<OpdDTO>>
    updateOpd({ code, opdDTO }: UpdateOpdRequest, opts?: OperationOpts): Observable<OpdDTO | RawAjaxResponse<OpdDTO>> {
        throwIfNullOrUndefined(code, 'code', 'updateOpd');
        throwIfNullOrUndefined(opdDTO, 'opdDTO', 'updateOpd');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<OpdDTO>({
            url: '/opds/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: opdDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    updateOpdWithOperationRow({ code, opdWithOperationRowDTO }: UpdateOpdWithOperationRowRequest): Observable<OpdWithOperationRowDTO>
    updateOpdWithOperationRow({ code, opdWithOperationRowDTO }: UpdateOpdWithOperationRowRequest, opts?: OperationOpts): Observable<RawAjaxResponse<OpdWithOperationRowDTO>>
    updateOpdWithOperationRow({ code, opdWithOperationRowDTO }: UpdateOpdWithOperationRowRequest, opts?: OperationOpts): Observable<OpdWithOperationRowDTO | RawAjaxResponse<OpdWithOperationRowDTO>> {
        throwIfNullOrUndefined(code, 'code', 'updateOpdWithOperationRow');
        throwIfNullOrUndefined(opdWithOperationRowDTO, 'opdWithOperationRowDTO', 'updateOpdWithOperationRow');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<OpdWithOperationRowDTO>({
            url: '/opds/rows/{code}'.replace('{code}', encodeURI(code)),
            method: 'PUT',
            headers,
            body: opdWithOperationRowDTO,
        }, opts?.responseOpts);
    };

}
