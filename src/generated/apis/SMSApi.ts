// tslint:disable
/**
 * Open Hospital API Documentation
 * Open Hospital API Documentation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    SmsDTO,
} from '../models';

export interface DeleteSmsRequest {
    smsDTO: Array<SmsDTO>;
}

export interface GetAllRequest {
    dateFrom: string;
    dateTo: string;
}

export interface SaveSmsRequest {
    smsDTO: SmsDTO;
    split?: boolean;
}

/**
 * no description
 */
export class SMSApi extends BaseAPI {

    /**
     */
    deleteSms({ smsDTO }: DeleteSmsRequest): Observable<boolean>
    deleteSms({ smsDTO }: DeleteSmsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteSms({ smsDTO }: DeleteSmsRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(smsDTO, 'smsDTO', 'deleteSms');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<boolean>({
            url: '/sms/delete',
            method: 'POST',
            headers,
            body: smsDTO,
        }, opts?.responseOpts);
    };

    /**
     */
    getAll({ dateFrom, dateTo }: GetAllRequest): Observable<Array<SmsDTO>>
    getAll({ dateFrom, dateTo }: GetAllRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<SmsDTO>>>
    getAll({ dateFrom, dateTo }: GetAllRequest, opts?: OperationOpts): Observable<Array<SmsDTO> | RawAjaxResponse<Array<SmsDTO>>> {
        throwIfNullOrUndefined(dateFrom, 'dateFrom', 'getAll');
        throwIfNullOrUndefined(dateTo, 'dateTo', 'getAll');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'dateFrom': dateFrom,
            'dateTo': dateTo,
        };

        return this.request<Array<SmsDTO>>({
            url: '/sms',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    saveSms({ smsDTO, split }: SaveSmsRequest): Observable<boolean>
    saveSms({ smsDTO, split }: SaveSmsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    saveSms({ smsDTO, split }: SaveSmsRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(smsDTO, 'smsDTO', 'saveSms');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (split != null) { query['split'] = split; }

        return this.request<boolean>({
            url: '/sms',
            method: 'POST',
            headers,
            query,
            body: smsDTO,
        }, opts?.responseOpts);
    };

}
